# -*- coding: utf-8 -*-
"""Tech Challenge 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aNrlBbsmmdf5CTJVJQklA78IVxDtS2vJ
"""

import requests
import pandas as pd

api_key = 'llflpOIMWYDhjqfbWUj8bg1bCpdlccFikD1zBJoQ'
base_url = 'https://api.eia.gov/v2/petroleum/pri/spt/data/'
params = {
    'api_key': api_key,
    'frequency': 'daily',
    'data[0]': 'value',
    'facets[product][]': 'EPCBRENT',
    'offset': 0,
    'length': 5000
}

# Lista para coletar todos os dados
all_data = []

# Loop para coletar dados via paginação
while True:
    response = requests.get(base_url, params=params)
    data = response.json()
    all_data.extend(data['response']['data'])  # Adiciona os dados desta página à lista total
    if params['offset'] + 5000 >= int(data['response']['total']):
        break  # Sai do loop se não houver mais dados para buscar
    params['offset'] += 5000  # Incrementa o offset para a próxima página

# Criando um DataFrame com os dados coletados
df = pd.DataFrame(all_data)
df['Date'] = pd.to_datetime(df['period'])  # Convertendo 'period' para datetime
df['Price'] = df['value'].astype(float)  # Convertendo 'value' para float

# Exibindo as primeiras linhas do DataFrame
print(df[['Date', 'Price']].head())

import matplotlib.pyplot as plt

# Análise Exploratória Básica
print(df.describe())

# Visualização de Tendências de Preços
plt.figure(figsize=(10, 5))
plt.plot(df['Date'], df['Price'], marker='o', linestyle='-', color='b')
plt.title('Tendência dos Preços do Petróleo Brent')
plt.xlabel('Data')
plt.ylabel('Preço (USD por barril)')
plt.grid(True)
plt.show()

import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose

# Certificando-se de que a data está em formato datetime e definida como índice
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Decomposição da série temporal
result = seasonal_decompose(df['Price'], model='additive', period=365)  # ajuste o 'period' conforme necessário

# Plotando a decomposição
result.plot()
plt.show()

from statsmodels.tsa.stattools import adfuller

# Teste de Dickey-Fuller
result_df = adfuller(df['Price'])
print('ADF Statistic: %f' % result_df[0])
print('p-value: %f' % result_df[1])
print('Critical Values:')
for key, value in result_df[4].items():
    print('\t%s: %.3f' % (key, value))

# Interpretação do resultado
if result_df[1] < 0.05:
    print("Série Temporal é estacionária.")
else:
    print("Série Temporal não é estacionária.")

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Autocorrelação
plot_acf(df['Price'])
plt.show()

# Autocorrelação parcial
plot_pacf(df['Price'])
plt.show()

# Certificar que o índice de datas é monotônico e está em ordem
df.sort_index(inplace=True)

# Removendo possíveis duplicatas
df = df[~df.index.duplicated(keep='first')]

# Atribuir uma frequência ao índice de datas - Diária neste caso
df = df.asfreq('D')

from statsmodels.tsa.arima.model import ARIMA

# Configuração e ajuste do modelo ARIMA
model = ARIMA(df['Price'], order=(1, 0, 1))
fitted_model = model.fit()

# Sumário do Modelo
print(fitted_model.summary())

# Previsões com datas corrigidas
df['forecast'] = fitted_model.predict(start='2024-01-01', end='2024-02-26', dynamic=True)

# Plotando os preços reais vs previsões
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['Price'], label='Preço Real')
plt.plot(df.index, df['forecast'], label='Previsão', color='red')
plt.title('Preço Real vs Previsão do Petróleo Brent')
plt.xlabel('Data')
plt.ylabel('Preço (USD por barril)')
plt.legend()
plt.show()

train_df = df[df.index < '2024-01-01']

# Configurando e ajustando o modelo ARIMA
model = ARIMA(train_df['Price'], order=(1, 0, 1))
fitted_model = model.fit()

# Previsões para 2024 - vamos definir uma faixa de datas para 2024
start_date = '2024-01-01'
end_date = '2024-12-31'
dates = pd.date_range(start=start_date, end=end_date, freq='D')
future = pd.DataFrame(index=dates, columns=df.columns)

# Fazendo previsões para 2024
future['forecast'] = fitted_model.predict(start=start_date, end=end_date, dynamic=True)

# Juntando os dados de treino com as previsões
full_df = pd.concat([train_df, future])

# Plotando os preços reais até 2023 e as previsões para 2024
plt.figure(figsize=(14, 7))
plt.plot(train_df['Price'], label='Preço Real (até 2023)')
plt.plot(future['forecast'], label='Previsão para 2024', color='red')
plt.title('Previsões do Modelo ARIMA para o Petróleo Brent em 2024')
plt.xlabel('Data')
plt.ylabel('Preço (USD por barril)')
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Garantindo que somente as previsões para 2024 são plotadas
plt.figure(figsize=(10, 5))
plt.plot(future.index, future['forecast'], color='red', label='Previsão para 2024')
plt.title('Previsão do Modelo ARIMA para o Petróleo Brent em 2024')
plt.xlabel('Data')
plt.ylabel('Preço (USD por barril)')
plt.legend()
plt.show()